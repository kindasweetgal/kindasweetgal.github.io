<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>leetcode：两数之和 python实现</title>
    <url>/2020/06/15/leetcode%EF%BC%9A%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%20python%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="leetcode：两数之和-python实现"><a href="#leetcode：两数之和-python实现" class="headerlink" title="leetcode：两数之和 python实现"></a>leetcode：两数之和 python实现</h2><p>题目描述：<br><strong>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。<br>来源：力扣（LeetCode）</strong></p>
<p>title: leetcode：两数之和 python实现<br>date: 2020-06-15 9:44:13<br>tags:</p>
<ul>
<li>leetcode</li>
</ul>
<a id="more"></a>

<p>参照官方文档实现, 刚学python，详细记录不会的点</p>
<p><strong>方法一：暴力解题，双重循环</strong><br>脑子里只有这一种方法。。</p>
<p><strong>收获：1.  list的长度函数len()<br>           2.  range()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,len(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i]+nums[j]==target:</span><br><span class="line">                    <span class="keyword">return</span> i,j</span><br></pre></td></tr></table></figure>
<p>执行用时：3184 ms    内存消耗：13.5 MB<br>时间复杂度O（n²）   空间复杂度O（1）</p>
<p>方法二：两遍哈希表<br>原来python的字典就是c++的map啊。。</p>
<p><strong>收获：判断字典中含不含有某个键值用 if key in dict，has_key()在python3不能使用了。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dict1=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            dict1[nums[i]]=i</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            c=target-nums[i]</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> dict1:</span><br><span class="line">                <span class="keyword">if</span> dict1[c]!=i:</span><br><span class="line">                    <span class="keyword">return</span> i,dict1[c]</span><br></pre></td></tr></table></figure>
<p>执行用时：40 ms        内存消耗：14.1 MB<br>时间复杂度：O(n)     空间复杂度：O(n)</p>
<p>方法三：一遍哈希表<br><strong>真巧妙啊！！</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        dict2=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            c=target-nums[i]</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> dict2:</span><br><span class="line">                <span class="keyword">return</span> dict2[c],i</span><br><span class="line">            dict2[nums[i]]=i</span><br></pre></td></tr></table></figure>
<p>执行用时：32 ms        内存消耗：14 MB<br>时间复杂度：O(n)     空间复杂度：O(n)</p>
]]></content>
  </entry>
  <entry>
    <title>yolov3训练自己的数据集（darknet）+visdrone数据集</title>
    <url>/2020/06/15/yolov3%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86%EF%BC%88darknet%EF%BC%89+visdrone%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    <content><![CDATA[<p><strong>全部完成分为下面几个步骤：</strong><br>1.制作自己的数据集-将visdrone转化为yolo所需的格式 （下面先完成这部分）<br>2.配置yolov3<br>3.训练验证及计算map</p>
<p>title:yolov3训练自己的数据集（darkent）+visdrone<br>date: 2020-04-06 10:44:13<br>tags:</p>
<ul>
<li>yolov3训练</li>
<li>visdrone数据集</li>
</ul>
<a id="more"></a>

<p><strong>下篇链接：[<a href="https://blog.csdn.net/daisy_d_/article/details/105771633]" target="_blank" rel="noopener">https://blog.csdn.net/daisy_d_/article/details/105771633]</a></strong></p>
<p>踩了很多坑，分享一下自己训练的经历~<br>我使用的<strong>visdrone数据集</strong>包含很多小目标，选择的<strong>darknet框架下的yolov3</strong>。也尝试了pytorch版本的不过刚开始效果不好，等的很着急后来放弃了，到后来才知道这个数据集现需要很长时间训练，我用的云服务器1080ti显卡，大概需要60个小时<del>~</del></p>
<p>数据集下载链接：<a href="https://www.jianshu.com/p/62e827306fca" target="_blank" rel="noopener">https://www.jianshu.com/p/62e827306fca</a><br>。使用的VisDrone2018-DET dataset 的trainset（1.44GB）和valset（0.07GB）</p>
<p>darknet的yolo下载链接：<a href="https://github.com/pjreddie/darknet.git" target="_blank" rel="noopener">https://github.com/pjreddie/darknet.git</a></p>
<h2 id="制作数据集"><a href="#制作数据集" class="headerlink" title="制作数据集"></a>制作数据集</h2><p>最终形成的数据集的格式：<br>    images —— 存放.jpg图像<br>    Annotations —— 存放图像对应的xml文件<br>    ImagesSets/Main —— 存放用于train/test图像的名字列表txt<br>    labels——标签<br>    test.txt<br>    train.txt<br>    val.txt</p>
<p>我参考的链接：<a href="https://blog.csdn.net/qq_37775990/article/details/90145081" target="_blank" rel="noopener">https://blog.csdn.net/qq_37775990/article/details/90145081</a><br>下面需要的代码我放在了百度网盘：<br><a href="https://pan.baidu.com/s/17Nywnkb1d4SjMqxUdMQqJA" target="_blank" rel="noopener">https://pan.baidu.com/s/17Nywnkb1d4SjMqxUdMQqJA</a> 提取码：kPjI </p>
<p><strong>1.图片标注重命名</strong>（可做可不做，只是改变了名字）<br>使用 <strong>rename.py</strong> 对<strong>图像</strong>文件进行重命名，对<strong>标注</strong>文件进行重命名（两个步骤都要做，注意修改程序中的路径）会得到下面的效果，简单示例。<img src="https://img-blog.csdnimg.cn/20200425132600524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RhaXN5X2Rf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200425132600458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RhaXN5X2Rf,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.visdrone标注转换为VOC格式</strong></p>
<p>运行<strong>main.py</strong> 进行转换，同样注意修改程序中的路径。注意需要新建对应文件夹Annotations_否则会报错。<br>visdrone的标注方式与yolo标注不一样。这个步骤是将annotations中的txt将标注转换为VOC格式的xml.</p>
<p><strong>3.生成用于train、val的图像名字列表txt（生成于ImagesSets/Main下）</strong></p>
<p>运行 <strong>trainnamelist.py</strong> 形成了列表txt。此处生成了四个文件（train.txt test.txt val.txt trainval.txt）可以根据自己需要修改生成相应的文件。<br>这个步骤是将数据库中的图像进行随机抽取，分成4部分，一部分作为train(训练)，一部分作为validation(验证)，一部分test(测试)，（trainval暂时没明白。。）最后将这几部分图像的名字写入txt。</p>
<p><strong>4.生成label文件夹和txt文件</strong></p>
<p>运行<strong>label.py</strong>就会在目录下生成一个labels文件夹，三个txt文件。<br>lable.py下有类别，我这次只训练了10个类别，所以注释掉了第0类和第11类（’ignored regions’和’others‘）加上了if判断语句，其他类别的id数值也需要-1。这样就少了第0类和第11类，整体只有10类了。 具体位置代码里注释了一下。<br>这个步骤是生成labels文件夹，里面就是适合yolov3的标注文件了，和图像名称一一对应，内容意义是:<br>(class,   x_center ,   y_center ,   w  , h)<br>目标类别      标注框中心x轴相对坐标   标注框长宽相对长度<br>因为坐标和长宽都是相对整幅图像长宽的比例，所以数值应该是0-1。</p>
<p>第一次写博客，有什么错误请多指教<br>我第一次转化数据集的时候花了一天多的时间才搞明白，如果你也是第一次不要着急。加油丫<del>~</del></p>
]]></content>
  </entry>
  <entry>
    <title>吴恩达机器学习 课时 1 学习笔记</title>
    <url>/2020/06/06/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%20%E8%AF%BE%E6%97%B6%201%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>title:吴恩达机器学习 课时 1 学习笔记<br>date: 2020-06-06 10:44:13<br>tags:</p>
<ul>
<li>机器学习</li>
<li>学习笔记</li>
</ul>
<a id="more"></a>

<h1 id="吴恩达机器学习-课时-1-学习笔记"><a href="#吴恩达机器学习-课时-1-学习笔记" class="headerlink" title="吴恩达机器学习 课时 1 学习笔记"></a>吴恩达机器学习 课时 1 学习笔记</h1><h2 id="课时1-1-欢迎参加《机器学习》课程"><a href="#课时1-1-欢迎参加《机器学习》课程" class="headerlink" title="课时1-1 欢迎参加《机器学习》课程"></a>课时1-1 欢迎参加《机器学习》课程</h2><h5 id="机器学习："><a href="#机器学习：" class="headerlink" title="机器学习："></a>机器学习：</h5><p>​    1.人工智能发展出来的一个领域</p>
<p>​    2.计算机开发的一项新功能</p>
<h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><p>​    1.数据挖掘</p>
<p>​        自动化、互联网上的大量数据</p>
<p>​    2.不能用手来编程的应用</p>
<p>​        手写识别，自然语言处理和计算机视觉</p>
<p>​    3.私人定制程序</p>
<p>​        产品推荐</p>
<p>​    4.理解人类学习（大脑、真实的AI）</p>
<h2 id="课时1-2-什么是机器学习"><a href="#课时1-2-什么是机器学习" class="headerlink" title="课时1-2 什么是机器学习"></a>课时1-2 什么是机器学习</h2><h5 id="机器学习的定义："><a href="#机器学习的定义：" class="headerlink" title="机器学习的定义："></a>机器学习的定义：</h5><p>Arthur Samuel：Field of study that gives computers the ability to learn without being explicitly programmed.</p>
<p>在没有明确设置的情况下，使计算机具有学习能力的研究领域</p>
<p>Tom Mitchell ：Well-posed Learning Problem: A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measure by P, improves with experience E.</p>
<p>计算机程序从经验E中进行学习，解决某一任务T，进行某一性能度量P，通过P测定在T上的表现因经验E提高。</p>
<h5 id="机器学习算法："><a href="#机器学习算法：" class="headerlink" title="机器学习算法："></a>机器学习算法：</h5><pre><code>监督学习</code></pre><p>​    无监督学习</p>
<p>其他： 强化学习，推荐系统</p>
<h2 id="课时1-3-监督学习"><a href="#课时1-3-监督学习" class="headerlink" title="课时1-3 监督学习"></a>课时1-3 监督学习</h2><p>例子：房价预测，肿瘤良性or恶性预测</p>
<p><strong>监督学习</strong>：给一个数据集其中包括了<strong>正确答案</strong>，</p>
<p><strong>1. 回归问题</strong>：预测更多连续的有价值的输出</p>
<p><strong>2. 分类</strong>：预测一个（组）离散值输出</p>
<h2 id="课时1-4-无监督学习"><a href="#课时1-4-无监督学习" class="headerlink" title="课时1-4 无监督学习"></a>课时1-4 无监督学习</h2><p>Unsupervised algorithm</p>
<p>聚类算法：组织计算机集群，社交网络分析，市场细分，天文数据分析</p>
]]></content>
  </entry>
  <entry>
    <title>吴恩达机器学习 课时2 学习笔记</title>
    <url>/2020/06/06/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%20%E8%AF%BE%E6%97%B62%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>title:吴恩达机器学习 课时 1 学习笔记<br>date: 2020-06-06 10:44:13<br>tags:</p>
<ul>
<li>机器学习</li>
<li>学习笔记</li>
</ul>
<a id="more"></a>

<h1 id="吴恩达机器学习-课时-2-学习笔记"><a href="#吴恩达机器学习-课时-2-学习笔记" class="headerlink" title="吴恩达机器学习 课时 2 学习笔记"></a>吴恩达机器学习 课时 2 学习笔记</h1><h3 id="课时2-1-模型描述"><a href="#课时2-1-模型描述" class="headerlink" title="课时2-1 模型描述"></a>课时2-1 模型描述</h3><p>m=训练样本数量</p>
<p>x=输入变量/特征</p>
<p>y=输出变量/目标变量</p>
<p>（x，y）一个训练样本</p>
<p>（x<sup>(i)</sup>,y<sup>(i)</sup>） 第i个样本·</p>
<p>h假设函数（hypothesis ）</p>
<h3 id="课时2-2-代价函数"><a href="#课时2-2-代价函数" class="headerlink" title="课时2-2 代价函数"></a>课时2-2 代价函数</h3><p>h<sub>θ</sub>（x)=θ<sub>0</sub>+θ<sub>1</sub>*x</p>
<p>尽量选择参数合理准确地预测y</p>
<p>代价函数：（平方误差代价函数）<br>$$<br>minimize \frac{1}{2m}\sum_{i=1}^m(h_θ(x^{(i)})-y^{(i)})^2<br>$$<br>（加二分之一为了好求导）</p>
<h3 id="课时2-3-代价函数（一）"><a href="#课时2-3-代价函数（一）" class="headerlink" title="课时2-3 代价函数（一）"></a>课时2-3 代价函数（一）</h3><p>![](F:\blog\blog\source_posts\pictures\cost function.png)</p>
<h3 id="课时2-4-代价函数（二）"><a href="#课时2-4-代价函数（二）" class="headerlink" title="课时2-4 代价函数（二）"></a>课时2-4 代价函数（二）</h3><p>代价函数计算，等高线绘制</p>
<h3 id="课时2-5-梯度下降"><a href="#课时2-5-梯度下降" class="headerlink" title="课时2-5 梯度下降"></a>课时2-5 梯度下降</h3><p><img src="F:%5Cblog%5Cblog%5Csource_posts%5Cpictures%5Cgradient_descent.jpg" alt=""></p>
<h3 id="课时2-6-梯度下降知识点总结"><a href="#课时2-6-梯度下降知识点总结" class="headerlink" title="课时2-6 梯度下降知识点总结"></a>课时2-6 梯度下降知识点总结</h3><p>学习率：太小下降太慢，太大来回跳跃。</p>
<p>局部极小值：梯度下降会自动采用更小的步幅</p>
<h3 id="课时2-7-线性回归的梯度下降"><a href="#课时2-7-线性回归的梯度下降" class="headerlink" title="课时2-7 线性回归的梯度下降"></a>课时2-7 线性回归的梯度下降</h3><p><img src="F:%5Cblog%5Cblog%5Csource_posts%5Cpictures%5C2-7.png" alt=""></p>
<p>线性回归模型呈碗状</p>
<p>Batch梯度下降法：全览整个数据集</p>
]]></content>
  </entry>
</search>
